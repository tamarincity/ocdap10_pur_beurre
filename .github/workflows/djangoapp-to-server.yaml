# This workflow will install Python dependencies, run tests and lint with a single version of Python (python 3.10)
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: Automatically Testing Python Application then deploy on server

# On push or pull_request on branch main
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

permissions:
  contents: read

jobs:
  test:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - run: |
        git fetch --prune --unshallow
    - name: Set up Python 3.10
      uses: actions/setup-python@v3
      with:
        python-version: "3.10"
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pytest
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    - name: Test with pytest
      run: |
        pip install pytest-django
        export PYTHONPATH=src
        python -m pytest
  deploy:
    name: "Deploy to staging"
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Configure SSH
        run: |
          mkdir -p ~/.ssh/
          echo "$SSH_KEY" > ~/.ssh/staging.key
          chmod 600 ~/.ssh/staging.key
          cat >>~/.ssh/config <<END
          Host staging
            HostName $SSH_HOST
            User $SSH_USER
            IdentityFile ~/.ssh/staging.key
            StrictHostKeyChecking no
          END
        env:
          SSH_USER: ${{ secrets.USERNAME }}
          SSH_KEY: ${{ secrets.PRIVATE_KEY }}
          SSH_HOST: ${{ secrets.HOST }}

      - name: Stop the server
        run: ssh staging 'sudo supervisorctl stop all'

      - name: Check out the source
        run: ssh staging 'cd ocdap10_pur_beurre && git fetch && git reset --hard origin/main'

      - name: Start the server
        if: ${{ always() }}
        run: ssh staging 'sudo supervisorctl start all'
